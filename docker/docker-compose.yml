version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: task_scheduler
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    command: postgres -c shared_preload_libraries=pg_stat_statements -c log_statement=all
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d task_scheduler"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Backend (Go API)
  backend:
    build:
      context: .
      dockerfile: ../backend/Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: task_scheduler
      DB_USER: naimbiswas
      DB_PASSWORD: postgresql
      DB_SSLMODE: disable
      REDIS_URL: redis://:redis_password@redis:6379/0
      ENV: development
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../backend:/app:ro # For development hot reload
    networks:
      - app-network
  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NODE_ENV: development
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ../../frontend:/app:ro # For development hot reload
      - /app/node_modules
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge